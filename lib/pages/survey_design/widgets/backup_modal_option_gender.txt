import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:survey_io/common/constants/function/get_demography_value.dart';
import 'package:survey_io/common/constants/function/get_split_strip_value.dart';
import 'package:survey_io/models/survey_design/data/demography_gender_model.dart';

import 'package:survey_io/common/constants/widgets/indicator.dart';
import 'package:survey_io/common/components/divider.dart';
import 'package:survey_io/common/constants/colors.dart';
import 'package:survey_io/common/constants/styles.dart';
import 'package:survey_io/common/components/elevated_button.dart';
import 'package:survey_io/common/constants/padding.dart';

import 'package:survey_io/bloc/survey_design/survey_design_demography/survey_design_list_demography_gender/survey_design_list_demography_gender_bloc.dart';
import 'package:survey_io/datasources/survey_design/data/list_demography_gender.dart';
import 'package:survey_io/datasources/survey_design/repository/localRepositoryGender.dart';
import 'package:survey_io/datasources/survey_design/repository/localRepositoryScreener.dart';
import 'package:survey_io/datasources/survey_design/repository/localRepositoryReportTime.dart';
import 'package:survey_io/datasources/survey_design/repository/localRepositoryQuestion.dart';
import 'package:survey_io/datasources/survey_design/repository/localRepositoryPrice.dart';
import 'package:survey_io/datasources/survey_design/repository/localRepositoryRespondent.dart';
import 'package:survey_io/datasources/survey_design/repository/localRepositoryAge.dart';
import 'package:survey_io/datasources/survey_design/repository/localRepositoryChildren.dart';
import 'package:survey_io/datasources/survey_design/repository/localRepositoryIncome.dart';
import 'package:survey_io/datasources/survey_design/repository/localRepositoryMarital.dart';
import 'package:survey_io/datasources/survey_design/repository/localRepositoryOccupation.dart';
import 'package:survey_io/datasources/survey_design/repository/localRepositoryOutcome.dart';
import 'package:survey_io/datasources/survey_design/repository/localRepositoryRegion.dart';
import 'package:survey_io/datasources/survey_design/repository/localRepositoryReligion.dart';

class ModalOptionGender extends StatefulWidget {
  final void Function() onUpdate;
  const ModalOptionGender({super.key, required this.onUpdate});

  @override
  State<ModalOptionGender> createState() => _ModalOptionGenderState();
}

class _ModalOptionGenderState extends State<ModalOptionGender> {
  final List<DemographyGenderModel> list =
      ListDemographyGender.getDemographyGenderList();

  // Selected Gender
  int selectedId = 0;
  String selectedScope = 'Semua';
  bool selectAll = false;

  final respondentRepository = LocalRepositoryRespondent();
  final questionRepository = LocalRepositoryQuestion();
  final reportTimeRepository = LocalRepositoryReportTime();
  final screenerRepository = LocalRepositoryScreener();
  final ageRepository = LocalRepositoryDemographyAge();
  final childrenRepository = LocalRepositoryDemographyChildren();
  final genderRepository = LocalRepositoryDemographyGender();
  final maritalRepository = LocalRepositoryDemographyMarital();
  final occupationRepository = LocalRepositoryDemographyOccupation();
  final regionRepository = LocalRepositoryDemographyRegion();
  final religionRepository = LocalRepositoryDemographyReligion();
  final incomeRepository = LocalRepositoryDemographyIncome();
  final outcomeRepository = LocalRepositoryDemographyOutcome();
  final surveyDesignPriceRepository = LocalRepositorySurveyDesignPrice();

  List<String> selectedScopeAge = [];
  List<int> selectedIdAge = [];
  List<String> selectedScopeMarital = [];
  List<int> selectedIdMarital = [];
  List<String> selectedScopeChildren = [];
  List<int> selectedIdChildren = [];
  List<String> selectedScopeIncome = [];
  List<int> selectedIdIncome = [];
  List<String> selectedScopeOutcome = [];
  List<int> selectedIdOutcome = [];

  dynamic respondentScope;
  dynamic totalQuestionScope;
  dynamic reportTimeScope;

  int totalRespondentValue = 0;
  int totalQuestionValue = 0;
  int totalScreener = 0;
  int totalReportTime = 0;

  int firstAgeValue = 0;
  int lastAgeValue = 0;

  String screenerOptionValue = '';
  String selectedScopeGender = '';
  String selectedScopeReligion = '';
  String selectedScopeOccupation = '';
  String selectedScopeRegion = '';
  String firstIncomeValue = '';
  String lastIncomeValue = '';
  String firstOutcomeValue = '';
  String lastOutcomeValue = '';

  @override
  void initState() {
    super.initState();
    selectedScope = '';
    loadData();
    onLoadOption();
  }

  void loadData() {
    context.read<SurveyDesignListDemographyGenderBloc>().add(
        const SurveyDesignListDemographyGenderEvent.getListDemographyGender());
    getDemographyFunction();
    callDemographyFunction();
  }

  Future<Map<String, dynamic>> getDemographyFunction() async {
    Map<String, dynamic> results = {};

    results['respondentValue'] = await getRespondentOption();
    results['questionValue'] = await getQuestionOption();
    results['reportTimeValue'] = await getReportTimeOption();
    results['screenerValue'] = await getScreenerOption();

    results['ageValues'] = await getAgeOption();
    results['genderValue'] = await getGenderOption();
    results['maritalValue'] = await getMaritalOption();
    results['childrenValue'] = await getChildrenOption();

    results['occupationValue'] = await getOccupationOption();

    results['regionValue'] = await getRegionOption();
    results['religionValue'] = await getReligionOption();

    results['incomeValue'] = await getIncomeOption();
    results['outcomeValue'] = await getOutcomeOption();

    return results;
  }

  void callDemographyFunction() async {
    Map<String, dynamic> demographyResults = await getDemographyFunction();

    // Now you can access the results using the keys in the map
    int respondentValue = demographyResults['respondentValue'];
    int questionValue = demographyResults['questionValue'];
    int reportTimeValue = demographyResults['reportTimeValue'];
    int screenerValue = demographyResults['screenerValue'];

    String genderValue = demographyResults['genderValue'];
    String occupationValue = demographyResults['occupationValue'];
    String regionValue = demographyResults['regionValue'];
    String religionValue = demographyResults['religionValue'];

    List<int> ageValues = demographyResults['ageValues'];
    List<String> maritalValue = demographyResults['maritalValue'];
    List<String> childrenValue = demographyResults['childrenValue'];
    List<String> incomeValue = demographyResults['incomeValue'];
    List<String> outcomeValue = demographyResults['outcomeValue'];

    setState(() {
      totalRespondentValue = respondentValue;
      totalQuestionValue = questionValue;
      totalReportTime = reportTimeValue;
      totalScreener = screenerValue;

      firstAgeValue = ageValues.first;
      lastAgeValue = ageValues.last;

      selectedScopeGender = genderValue;
      selectedScopeMarital = maritalValue;
      selectedScopeChildren = childrenValue;
      selectedScopeOccupation = occupationValue;

      selectedScopeRegion = regionValue;
      selectedScopeReligion = religionValue;

      selectedScopeIncome = incomeValue;
      firstIncomeValue = getFirstValue(incomeValue.first);
      lastIncomeValue = getLastValue(incomeValue.last);

      selectedScopeOutcome = outcomeValue;
      firstOutcomeValue = getFirstValue(outcomeValue.first);
      lastOutcomeValue = getLastValue(outcomeValue.last);
    });

    // Use the results as needed in your code
    // print('respondent Value (Funcntion) : $totalRespondentValue');
    // print('question Value (Funcntion) : $totalQuestionValue');
    // print('reportTime Value (Funcntion) : $reportTimeValue');

    // print('screener Value (Funcntion) : $totalScreener');
    // print('Age Start (Funcntion) : $firstAgeValue');
    // print('Age End (Funcntion) : $lastAgeValue');

    // print('gender Value (Funcntion) : $selectedScopeGender');
    // print(
    //     'marital Value (Funcntion) : ${selectedScopeMarital.first} - ${selectedScopeMarital.last}');
    // print(
    //     'children Value (Funcntion) : ${selectedScopeChildren.first} - ${selectedScopeChildren.last}');

    // print('occupation Value (Funcntion) : $selectedScopeOccupation');

    // print('region Value (Funcntion) : $selectedScopeRegion');
    // print('religion Value (Funcntion) : $selectedScopeReligion');

    // print('income Value (Funcntion) : $firstIncomeValue -  $lastIncomeValue');
    // print(
    //     'outcome Value (Funcntion) : $firstOutcomeValue -  $lastOutcomeValue');
  }

  // Save to Shared References
  void onSaveOption() async {
    final data = {
      'id': selectedId,
      'scope': selectedScope,
    };
    final jsonData = jsonEncode(data);
    print(jsonData);
    await genderRepository.setOption(jsonData);
  }

  // Load from Shared References
  void onLoadOption() async {
    final savedData = await genderRepository.getOption();
    if (savedData != null) {
      setState(() {
        selectedId = savedData['id'];
        selectedScope = savedData['scope'];
        selectAll = selectedScope == "Semua" ? true : false;
        print('Load Selected Gender');
        print(selectedScope);
      });
      print(selectedScope);
    } else {
      print('Gender is Empty');
    }
  }

  // TO CLICK CALCULATE
  void handleCalculateButtonPressed() {}

  @override
  Widget build(BuildContext context) {
    return Container(
      height: MediaQuery.of(context).size.height * 0.6,
      padding: const EdgeInsets.all(10),
      decoration: const BoxDecoration(
          borderRadius: BorderRadius.only(
              topLeft: Radius.circular(30), topRight: Radius.circular(30)),
          color: Colors.white),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        mainAxisSize: MainAxisSize.min,
        children: [
          const IndicatorModal(),
          CustomDividers.smallDivider(),
          Container(
            padding: CustomPadding.p1,
            child: Text(
              'Jenis Kelamin',
              style: TextStyles.h2(color: AppColors.secondary),
            ),
          ),
          Container(
            padding: CustomPadding.p1,
            child: Text(
              'Rp5.000 / 50 Responden',
              style: TextStyles.extraLarge(color: AppColors.secondary),
            ),
          ),
          CustomDividers.verySmallDivider(),
          Expanded(
            child: SingleChildScrollView(
              child: BlocBuilder<SurveyDesignListDemographyGenderBloc,
                  SurveyDesignListDemographyGenderState>(
                builder: (context, state) {
                  return state.maybeWhen(
                    orElse: () {
                      return Container();
                    },
                    loading: () {
                      return Container();
                    },
                    error: (message) {
                      return Text(message);
                    },
                    loaded: (data) {
                      return ListView.separated(
                        shrinkWrap: true,
                        physics: const NeverScrollableScrollPhysics(),
                        itemCount: data.length,
                        separatorBuilder: ((context, index) {
                          return const Divider(
                            thickness: 0.3,
                          );
                        }),
                        itemBuilder: (BuildContext context, int index) {
                          final item = data[index];
                          return ListTile(
                              dense: true,
                              title: Text(
                                item.scope,
                                style: TextStyles.extraLarge(
                                  color: item.id == selectedId
                                      ? Colors.black
                                      : Colors.grey.withOpacity(0.6),
                                ),
                              ),
                              leading: Radio(
                                activeColor: AppColors.primary,
                                value: item.id,
                                groupValue: selectedId,
                                onChanged: (value) {
                                  setState(() {
                                    selectedId = value!;
                                    selectedScope = item.scope;
                                  });
                                  print(selectedId);
                                  print(selectedScope);
                                },
                              ));
                        },
                      );
                    },
                  );
                },
              ),
            ),
          ),
          CustomDividers.smallDivider(),
          Padding(
            padding: CustomPadding.p1,
            child: ButtonFilled.primary(
                text: 'OK',
                onPressed: () {
                  onSaveOption();
                  onLoadOption();
                  widget.onUpdate();
                  Navigator.of(context).pop();
                }),
          ),
        ],
      ),
    );
  }
}
